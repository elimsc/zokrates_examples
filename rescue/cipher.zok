const u32 STATE_WIDTH = 4
const u32 NUM_ROUNDS = 14
const u32 CYCLE_LENGTH = 16

const u32 ALPHA = 5

const field[STATE_WIDTH*STATE_WIDTH] MDS = [
    340282366920938463463374557953744960808,
    1080,
    340282366920938463463374557953744961147,
    40,
    340282366920938463463374557953744932377,
    42471,
    340282366920938463463374557953744947017,
    1210,
    340282366920938463463374557953744079447,
    1277640,
    340282366920938463463374557953744532108,
    33880,
    340282366920938463463374557953720263017,
    35708310,
    340282366920938463463374557953733025977,
    925771
]

const field[STATE_WIDTH*STATE_WIDTH] INV_MDS = [
    8138170836863241576224485011528071696597514844813932685682467310048924000112,
    15023268392528856731693853468825060661086777406192987399223888572791203892748,
    1980175489278737600274358498818237879256902576493681414188073895027830875703,
    8756200059540376130432449565783601621997062399729103381933846120505265488339,
    16415234008013340919404158635873254488610404425650955688953403508714829254546,
    2515198299285178712439148952208233690924836408463100454650766497382492288404,
    8623445935382323389809538788821727509812361071416440105103662246252688475460,
    6343936535530369016972300168051756169590655321699208632320443646023214238492,
    2007670392327233629894204216549307120463647875745446317569268293489702248032,
    10248557288501346965979756711776063421273445366521880775533328457954258686501,
    17591949588791860285664058086819073259117875687872063074432929382660007495532,
    4049637508590771157087127529810528058083288297090314713492749764269255826837,
    11045202771509156595458220854851693679658514384010503021894589912363938677635,
    13257731967726926336573607951255115719683843886438854251835078218096215592925,
    795728467201634560072953459660312758308319425926029302791529391091597623165,
    8799151571773494546520364279187849701287579530854318304507078376821472363177
]

const field[CYCLE_LENGTH][STATE_WIDTH*2] ARK = [
    [
        252629594110556276281235816992330349983,
        121163867507455621442731872354015891839,
        244623479936175870778515556108748234900,
        181999122442017949289616572388308120964,
        130035663054758320517176088024859935575,
        274932696133623013607933255959111946013,
        130096286077538976127585373664362805864,
        209506446014122131232133742654202790201
    ],
    [
        51912929769931267810162308005565017268,
        202610584823002946089528994694473145326,
        295992101426532309592836871256175669136,
        313404555247438968545340310449654540090,
        137671644572045862038757754124537020379,
        29113322527929260506148183779738829778,
        98634637270536166954048957710629281939,
        90484051915535813802492401077197602516
    ],
    [
        193753019093186599897082621380539177732,
        88328997664086495053801384396180288832,
        134379598544046716907663161480793367313,
        50911186425769400405474055284903795891,
        12945394282446072785093894845750344239,
        110650301505380365788620562912149942995,
        154214463184362737046953674082326221874,
        306646039504788072647764955304698381135
    ],
    [
        279745705918489041552127329708931301079,
        111293612078035530300709391234153848359,
        18110020378502034462498434861690576309,
        41797883582559360517115865611622162330,
        333888808893608021579859508112201825908,
        291192643991850989562610634125476905625,
        115042354025120848770557866862388897952,
        281483497320099569269754505499721335457
    ],
    [
        172898111753678285350206449646444309824,
        202661860135906394577472615378659980424,
        141885268042225970011312316000526746741,
        270195331267041521741794476882482499817,
        196457080224171120865903216527675657315,
        56730777565482395039564396246195716949,
        4886253806084919544862202000090732791,
        147384194551383352824518757380733021990
    ],
    [
        119476237236248181092343711369608370324,
        182869361251406039022577235058473348729,
        45308522364899994411952744852450066909,
        15438528253368638146901598290564135576,
        130060283207960095436997328133261743365,
        83953475955438079154228277940680487556,
        328659226769709797512044291035930357326,
        228749522131871685132212950281473676382
    ],
    [
        46194972462682851176957413491161426658,
        296333983305826854863835978241833143471,
        138957733159616849361016139528307260698,
        67842086763518777676559492559456199109,
        45580040156133202522383315452912604930,
        67567837934606680937620346425373752595,
        202860989528104560171546683198384659325,
        22630500510153322451285114937258973361
    ],
    [
        324160761097464842200838878419866223614,
        338466547889555546143667391979278153877,
        189171173535649401433078628567098769571,
        162173266902020502126600904559755837464,
        136209703129442038834374731074825683052,
        61998071517031804812562190829480056772,
        307309080039351604461536918194634835054,
        26708622949278137915061761772299784349
    ],
    [
        129516553661717764361826568456881002617,
        224023580754958002183324313900177991825,
        17590440203644538688189654586240082513,
        135610063062379124269847491297867667710,
        146865534517067293442442506551295645352,
        238139104484181583196227119098779158429,
        39300761479713744892853256947725570060,
        54114440355764484955231402374312070440
    ],
    [
        222758070305343916663075833184045878425,
        323840793618712078836672915700599856701,
        103586087979277053032666296091805459741,
        160263698024385270625527195046420579470,
        76620453913654705501329735586535761337,
        117793948142462197480091377165008040465,
        86998218841589258723143213495722487114,
        203188618662906890442620821687773659689
    ],
    [
        313098786815741054633864043424353402357,
        133085673687338880872979866135939079867,
        219888424885634764555580944265544343421,
        5893221169005427793512575133564978746,
        123830602624063632344313821515642988189,
        99030942908036387138287682010525589136,
        181549003357535890945363082242256699137,
        152424978799328476472358562493335008209
    ],
    [
        274481943862544603168725464029979191673,
        4975004592976331754728718693838357226,
        101850445399221640701542169338886750079,
        230325699922192981509673754024218912397,
        50419227750575087142720761582056939006,
        112444234528764731925178653200320603078,
        312169855609816651638877239277948636598,
        204255114617024487729019111502542629940
    ],
    [
        95797476952346525817251811755749179939,
        306977388944722094681694167558392710189,
        300754874465668732709232449646112602172,
        25567836410351071106804347269705784680,
        129659188855548935155840545784705385753,
        228441586459539470069565041053012869566,
        178382533299631576605259357906020320778,
        274458637266680353971597477639962034316
    ],
    [
        280059913840028448065185235205261648486,
        246537412674731137211182698562269717969,
        259930078572522349821084822750913159564,
        186061633995391650657311511040160727356,
        179777566992900315528995607912777709520,
        209753365793154515863736129686836743468,
        270445008049478596978645420017585428243,
        70998387591825316724846035292940615733
    ],
    [0;STATE_WIDTH*2],
    [0;STATE_WIDTH*2]
]


def apply_sbox<N>(field[N] state) -> field[N]:
    for u32 i in 0..N do
        state[i] = state[i] ** ALPHA
    endfor 
    return state

def apply_mds<N>(field[N] state) -> field[N]:
    field[N] result = [0;N]
    field[N] temp = [0;N]
    for u32 i in 0..N do
        for u32 j in 0..N do
            temp[j] = MDS[i*N + j] * state[j]
        endfor
        for u32 j in 0..N do
            result[i] = result[i] + temp[j]
        endfor
    endfor
    return result

def apply_inv_mds<N>(field[N] state) -> field[N]:
    field[N] result = [0;N]
    field[N] temp = [0;N]
    for u32 i in 0..N do
        for u32 j in 0..N do
            temp[j] = INV_MDS[i*N + j] * state[j]
        endfor
        for u32 j in 0..N do
            result[i] = result[i] + temp[j]
        endfor
    endfor
    return result

def add_constants<N>(field[N] state, field[N] ark) -> field[N]:
    for u32 i in 0..N do
        state[i] = ark[i] + state[i]
    endfor
    return state

// round function:
// takes the previous state and a subkey as inputs 
// outputs a new state
// inputs to the first round are the plaintext and the master key
// output of the last round is the ciphertext
def round_step1<N>(field[N] state, field[N] subkey) -> field[N]:
    state = apply_sbox(state)
    state = apply_mds(state)
    state = add_constants(state, subkey)
    return state
def inv_round_step2<N>(field[N] state, field[N] subkey) -> field[N]:
    for u32 i in 0..N do
        state[i] = state[i] - subkey[i]
    endfor
    state = apply_inv_mds(state)
    state = apply_sbox(state)
    return state

// data(len=15): 0 -> 2 -> 4 -> .. -> 28 
// key(len=15): 0 -> 2 -> 4 -> .. -> 28
// check enc(key[0], data[0]) == data[14]
def main(field[15][4] key, field[15][4] data) -> bool:
    bool res = true
    for u32 i in 0..NUM_ROUNDS do
        field[4] data1 = data[i]
        field[4] data3 = data[i+1]
        field[4] key1 = key[i]
        field[4] key3 = key[i+1]
        field[4] ark1 = ARK[i][0..4]
        field[4] ark2 = ARK[i][4..8]

        field[4] key2_1 = round_step1(key1, ark1)
        field[4] key2_2 = inv_round_step2(key3, ark2)
        // check key equality
        for u32 j in 0..4 do
            bool is_equal = if key2_1[j] != key2_2[j] then false else true fi
            res = res && is_equal
        endfor

        field[4] data2_1 = round_step1(data1, key2_1)
        field[4] data2_2 = inv_round_step2(data3, key3)
        // check equality
        for u32 j in 0..4 do
            bool is_equal = if data2_1[j] != data2_2[j] then false else true fi
            res = res && is_equal
        endfor
    endfor
    
    return res

